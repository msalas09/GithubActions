# Unique name for this workflow
name: Deploying-Changes
run-name: ${{ github.actor }} is deploying changes

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events that a PR is merged
      types: [merged]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "development". This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ development ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
            

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job.
    deployment-on-development-org:
        # This job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v3
              with:
                node-version: '14'

            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            
            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme 
            # for more information on how this works.

            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 
            
            - name: 'Installing sfdx auth plugin'
              run: | 
                  echo y | sfdx plugins:install auth
                  sfdx plugins

            # Prior to setting up this workflow, you have to create a Github Secret
            # that contains the sfdx url of the integration/qa org.
            # To get the sfdx url first you have to Authorize in VS Code the destination org where
            # we are planning to deploy the changes and once you are authorized, run this command
            # sfdx force:org:display -u aliasOrg --verbose where aliasOrg is the alias that you define in the 
            # autorization process.
            # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
            # the sfdx project in the repositry, against the org from which the URL
            # was generated from. This works just like that, there's no need to create
            # connected apps or any else. 

            # The URL is stored in the Github Secret variable named SFDX_INTEGRATION_URL(you can use the name that you want)
            # so here we store the URL into a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL }} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration
              #run: sfdx force:auth:web:login -a githubAction -r https://lwcudemycom2-dev-ed.my.salesforce.com

            # We use SFDX Git Delta to create a directory with only the metadata that has been created or changed.
            # this allows us to deploy only those changes.
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "origin/development" --output changed-sources/ --generate-delta --source force-app/ 
                  
            
            # Deploy delta changes

            - name: 'Deploy the entire branch to Integration org'
              run: sfdx force:source:deploy -p force-app --testlevel NoTestRun --json